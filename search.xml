<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>十大排序算法的实现和相关分析</title>
      <link href="/posts/7ad6c44f/"/>
      <url>/posts/7ad6c44f/</url>
      
        <content type="html"><![CDATA[<h1 id="排序说明"><a href="#排序说明" class="headerlink" title="排序说明"></a>排序说明</h1><p>因为室友面试被问到排序算法，当时他因为知识储备问题答不上，回来和我说起面试题，我想了想，发现自己对这块也不太熟悉，所以整理了一些重要的算法，进行python实现。</p><p>本文主要会涉及几个点：</p><ol><li>每个排序的python实现</li><li>一些排序思想的介绍</li><li>记录时间复杂度和空间复杂度</li><li>最后给自己留下题目，方便日后回顾</li></ol><h1 id="排序问题"><a href="#排序问题" class="headerlink" title="排序问题"></a>排序问题</h1><p>关于排序的大概介绍如下图：</p><p><img alt="各排序时间复杂度/空间复杂度/稳定性" data-src="https://cdn.jsdelivr.net/gh/JSK520/blog_web@1.1/photos/sort_time.png" class="lozad"></p><blockquote><p>简单介绍一些概念：</p><blockquote><p>稳定性：在排序的过程中，相等的数是否会交换位置，会交换位置的算法则为 <strong><em>不稳定算法</em></strong><br>时间复杂度：通过大O算法进行初略进行算法的运行时间<br>空间复杂度：用到的内存初略计算</p></blockquote></blockquote><h1 id="各排序介绍"><a href="#各排序介绍" class="headerlink" title="各排序介绍"></a>各排序介绍</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><blockquote><p>最简单的排序算法<br>稳定性：稳定（如果里面的判断是= , 则为非稳定，正常默认冒泡排序为稳定算法）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    冒泡排序：</span></span><br><span class="line"><span class="string">    思路在 左右两个数 两两比较</span></span><br><span class="line"><span class="string">    :param arr:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(arr)-i<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>]:</span><br><span class="line">                tmp = arr[j]</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>]</span><br><span class="line">                arr[j+<span class="number">1</span>] = tmp</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><blockquote><p>思路在：从头开始遍历，选择出最小值下标，然后进行最小值交换<br>稳定性：非稳定。<br>举例：5 8 5 2 1 第一次排序 2和5交换位置后，原先在前面的5到后面去了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectionSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    选择排序：</span></span><br><span class="line"><span class="string">    思路在每次循环 选择最小的和当前循环的值进行转换</span></span><br><span class="line"><span class="string">    :param arr:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    arr_len = len(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(arr_len):<span class="comment"># 循环数组长度</span></span><br><span class="line">        min_index = i <span class="comment"># 假设i为最小值的下标</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,arr_len,<span class="number">1</span>):<span class="comment"># 拿最小值下标和后面的数进行比较</span></span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[min_index]:</span><br><span class="line">                min_index = j <span class="comment"># 比较选出最小值</span></span><br><span class="line">        <span class="comment"># 交换最小值位置</span></span><br><span class="line">        tmp = arr[min_index]</span><br><span class="line">        arr[min_index] = arr[i]</span><br><span class="line">        arr[i] = tmp</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><blockquote><p>思路在：current 为当前值，不断往前比较，确认达到最小/最大值 往那个index插入当前值<br>稳定性：稳定</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertionSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    插入排序：</span></span><br><span class="line"><span class="string">    思路在 current 为当前值，不断往前比较，确认达到最小/最大值 往那个index插入当前值</span></span><br><span class="line"><span class="string">    :param arr:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    arr_len = len(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,arr_len):<span class="comment"># 注意是从1开始，而非0</span></span><br><span class="line">        index = i<span class="number">-1</span> <span class="comment"># 当前比较数下标的前一个index</span></span><br><span class="line">        current = arr[i] <span class="comment"># 当前需要进行比较的数</span></span><br><span class="line">        <span class="keyword">while</span> index&gt;=<span class="number">0</span> <span class="keyword">and</span> arr[index] &gt; current: <span class="comment"># 当前数和前一个数进行比较</span></span><br><span class="line">            arr[index+<span class="number">1</span>] = arr[index] <span class="comment"># 如果当前数比前一个数小，把前一个数的值赋给 当前比较数</span></span><br><span class="line">            index-=<span class="number">1</span> <span class="comment"># 继续往左比较</span></span><br><span class="line">        arr[index+<span class="number">1</span>] = current <span class="comment"># 比较结束后，如果上面没有进入循环，则index+1 其实就是当前比较数</span></span><br><span class="line">                                <span class="comment"># 如果进入了循环，右边的数不断往左移，跳出循环后，把当前数赋给index + 1 位置</span></span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><blockquote><p>思想在：插入排序在小数据量的时候时间是教快的，希尔的思路在于，把大数据拆分成多个分区，不同分区用插入排序进行排序，最后融合<br>稳定性：非稳定</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shellSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    希尔排序：</span></span><br><span class="line"><span class="string">    思路在 分序列进行插入排序</span></span><br><span class="line"><span class="string">    :param arr:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    arr_len = len(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(arr_len/<span class="number">2</span>):</span><br><span class="line">        插入排序</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><blockquote><p>快速排序是比较复杂的排序算法<br>思路在：<a href="http://wiki.jikexueyuan.com/project/easy-learn-algorithm/fast-sort.html" target="_blank" rel="noopener">快速排序参考资料（看完立马懂）</a><br>稳定性：非稳定</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort</span><span class="params">(arr,start,end)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    快速排序：</span></span><br><span class="line"><span class="string">    思路在 选一个比较值 大的放右边 小的放左边 以此为逻辑递归执行</span></span><br><span class="line"><span class="string">    涉及递归，存在递归深度问题</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> start &gt;= end: <span class="keyword">return</span></span><br><span class="line">    temp = arr[start] <span class="comment"># 选出一个值作为比较值</span></span><br><span class="line">    left = start <span class="comment"># 开始下标</span></span><br><span class="line">    right = end <span class="comment"># 结束下标</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> left &lt; right: <span class="comment"># 判断下标没有碰面 才进行下一步操作</span></span><br><span class="line">        <span class="comment"># 外面的while用于判断是否继续进行循环比较</span></span><br><span class="line">        <span class="comment"># 里面的while用于控制范围缩小的区间</span></span><br><span class="line">        <span class="keyword">while</span> left&lt;right <span class="keyword">and</span> arr[right] &gt;= temp:<span class="comment"># 判断当前值是否小于比较值，当小于的时候则不继续循环，大于的时候则继续循环</span></span><br><span class="line">            right -= <span class="number">1</span> <span class="comment"># 一直往左进行范围缩小，直到小于比较值</span></span><br><span class="line">        <span class="keyword">while</span> left&lt;right <span class="keyword">and</span> arr[left] &lt;= temp: <span class="comment"># 和上面的循环判断相反</span></span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> left &lt; right: <span class="comment"># 交换两者的位置</span></span><br><span class="line">            arr[right] = arr[left] ^ arr[right]</span><br><span class="line">            arr[left] = arr[left] ^ arr[right]</span><br><span class="line">            arr[right] = arr[left] ^ arr[right]</span><br><span class="line">    <span class="comment"># 交换 比较值和left=right的值</span></span><br><span class="line">    arr[start] = arr[left]</span><br><span class="line">    arr[left] = temp</span><br><span class="line">    <span class="comment"># 以中间值左右划分，递归进行快速排序。递归会有深度问题，可以用栈的方式实现</span></span><br><span class="line">    quickSort(arr,start,left<span class="number">-1</span>)</span><br><span class="line">    quickSort(arr,left+<span class="number">1</span>,end)</span><br></pre></td></tr></table></figure><blockquote><p>下面是用栈的方式替代递归</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zhan_quickSort</span><span class="params">(arr,start,end)</span>:</span></span><br><span class="line">    stack = []</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    stack.append(start)</span><br><span class="line">    stack.append(end)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> len(stack) &gt; <span class="number">0</span>:</span><br><span class="line">        end = stack.pop()</span><br><span class="line">        start = stack.pop()</span><br><span class="line"></span><br><span class="line">        index = baseSort(arr,start,end) <span class="comment"># 这一部分是上面去除quickSort递归前面的逻辑，直接返回中间值</span></span><br><span class="line">        <span class="keyword">if</span> index+<span class="number">1</span> &lt; right:</span><br><span class="line">            stack.append(index+<span class="number">1</span>)</span><br><span class="line">            stack.append(right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> index<span class="number">-1</span> &gt; left:</span><br><span class="line">            stack.append(index<span class="number">-1</span>)</span><br><span class="line">            stack.append(left)</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><blockquote><p>思路在：用二分法 对数组进行切分，从最小值开始进行归并排序<br>稳定性：稳定</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeSort</span><span class="params">(arr)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left,right)</span>:</span></span><br><span class="line">        merged = [] <span class="comment"># 创建一个数组</span></span><br><span class="line">        i, j = <span class="number">0</span>, <span class="number">0</span> <span class="comment"># 下标判断，默认为0</span></span><br><span class="line">        left_len = len(left)</span><br><span class="line">        right_len = len(right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &lt; left_len <span class="keyword">and</span> j &lt; right_len: <span class="comment"># 遍历传进来的两个数组，判断下标不会超过数组长度</span></span><br><span class="line">            <span class="keyword">if</span> left[i] &lt; right[j]: <span class="comment"># 对两个数组从0开始比较 符合条件的就把值添加到 新建的数组中</span></span><br><span class="line">                merged.append(left[i])</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                merged.append(right[j])</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 最后跳出循环，把剩余的元素给添加进 新建数组中</span></span><br><span class="line">        merged.extend(left[i:])</span><br><span class="line">        merged.extend(right[j:])</span><br><span class="line">        <span class="keyword">return</span> merged</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(arr) &lt;= <span class="number">1</span>:<span class="keyword">return</span> arr <span class="comment"># 递归的返回条件</span></span><br><span class="line">    middle = len(arr)//<span class="number">2</span> <span class="comment"># 二分出左右两边数组</span></span><br><span class="line">    <span class="comment"># 递归左右两边数组</span></span><br><span class="line">    left = mergeSort(arr[:middle])</span><br><span class="line">    right = mergeSort(arr[middle:])</span><br><span class="line">    <span class="keyword">return</span> merge(left,right)</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><blockquote><p>堆排序是一个有意思的排序。思路在 构建顶堆，然后交换顶堆和最后的值<br>这里涉及两个概念：大顶堆 和 小顶堆<br>堆的概念: 堆指的是完全二叉树的数组对象，完全二叉树指的是 1、倒数第一层以前都为满节点 2、最后一层节点都靠左<br>大顶堆：节点值都比子节点大，构建大顶堆最后排序为：升序<br>小顶堆：节点值都比子节点小，构建小顶堆最后排序为：降序<br>稳定性：非稳定<br>参考资料：<a href="https://www.jianshu.com/p/d174f1862601" target="_blank" rel="noopener">堆排序[1]</a> <a href="https://www.cnblogs.com/shiqi17/p/9694938.html" target="_blank" rel="noopener">堆排序[2]</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(elems)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    思路在 先构建顶堆 然后 交换头和尾节点 再从头开始构建顶堆</span></span><br><span class="line"><span class="string">    :param elems:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">siftdown</span><span class="params">(elems, begin, end)</span>:</span> <span class="comment">#向下筛选</span></span><br><span class="line">        i, j = begin, begin*<span class="number">2</span>+<span class="number">1</span> <span class="comment">#i为父节点，j为i的左子结点</span></span><br><span class="line">        <span class="keyword">while</span> j &lt; end:</span><br><span class="line">            <span class="keyword">if</span> j+<span class="number">1</span> &lt; end <span class="keyword">and</span> elems[j] &gt; elems[j+<span class="number">1</span>]: <span class="comment">#如果左子结点大于右子结点</span></span><br><span class="line">                j += <span class="number">1</span>                              <span class="comment">#则将j指向右子结点</span></span><br><span class="line">            <span class="keyword">if</span> elems[i] &lt; elems[j]: <span class="comment">#j已经指向两个子结点中较小的位置，</span></span><br><span class="line">                <span class="keyword">break</span>        <span class="comment">#如果插入元素e小于j位置的值，则为3者中最小的</span></span><br><span class="line">            elems[i],elems[j] = elems[j],elems[i] <span class="comment"># 交换两个值，子节点替代父节点</span></span><br><span class="line">            i,j = j,j*<span class="number">2</span>+<span class="number">1</span> <span class="comment"># 把j的下标赋给i，j的值变成原j的子节点，这一步是为了交换节点后，对新的子树进行顶堆建立</span></span><br><span class="line"></span><br><span class="line">    end = len(elems)<span class="number">-1</span></span><br><span class="line">    parent = end//<span class="number">2</span><span class="number">-1</span> <span class="comment"># 取出所有有子节点的父节点</span></span><br><span class="line">    <span class="keyword">while</span> parent &gt;= <span class="number">0</span>: <span class="comment"># 构建顶堆</span></span><br><span class="line">        siftdown(elems,parent,end)</span><br><span class="line">        parent -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> end &gt; <span class="number">0</span>:</span><br><span class="line">        elems[end],elems[<span class="number">0</span>] = elems[<span class="number">0</span>],elems[end] <span class="comment"># 交换顶值和最后值</span></span><br><span class="line">        siftdown(elems,<span class="number">0</span>,end) <span class="comment"># 以首位作为父节点，重新构建顶堆</span></span><br><span class="line">        end -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elems</span><br></pre></td></tr></table></figure><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><blockquote><p>思路在 构建一个新数组 它的下标为需要排序的数组值 它的值为该数出现的次数，最后遍历新数组按顺序取出值<br>计数排序是特殊的桶排序<br>稳定性：稳定</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countingSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    思路在 构建一个新数组 它的下标为需要排序的数组值 它的值为该数出现的次数</span></span><br><span class="line"><span class="string">    :param arr:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    max_value = max(arr) <span class="comment"># 计数排序需要获取最大值</span></span><br><span class="line">    count = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(max_value+<span class="number">1</span>)] <span class="comment"># 下标为arr的值 值为计数总数</span></span><br><span class="line">    last_value = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">        count[arr[i]] += <span class="number">1</span> <span class="comment"># 把需要排序的值 做为下标 进行计数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(count)):</span><br><span class="line">        <span class="keyword">while</span> count[i] &gt; <span class="number">0</span>: <span class="comment"># 遍历计数值 如果大于0 则把下标添加到新的数组</span></span><br><span class="line">            last_value.append(i)</span><br><span class="line">            count[i] -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> last_value</span><br></pre></td></tr></table></figure><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><blockquote><p>思路在：过个人方式把数据划分到不同的桶中（抽象概念，可以用数组实现） 然后桶内排序（桶内排序需要用到别的排序算法），遍历出来即是有序数组<br>稳定性：稳定</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bucket_sort</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    思路在：</span></span><br><span class="line"><span class="string">    通过个人方式把数据划分到不同的桶中（抽象概念，可以用数组实现） 然后桶内排序（桶内排序需要用到别的排序算法），遍历出来即是有序数组</span></span><br><span class="line"><span class="string">    :param array:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 1.创建n个空桶</span></span><br><span class="line">    min_value = min(array)</span><br><span class="line">    max_value = max(array)</span><br><span class="line">    bucket_size = max_value-min_value+<span class="number">1</span></span><br><span class="line">    new_list = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(bucket_size)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.把arr[i] 插入到bucket[n*array[i]]</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> array:</span><br><span class="line">        <span class="comment"># 核心步骤在 如何划分桶 即index 的生成逻辑</span></span><br><span class="line">        index = (data-min_value)</span><br><span class="line">        new_list[index].append(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.桶内排序</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(bucket_size):</span><br><span class="line">        new_list[i].sort()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4.产生新的排序后的列表</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(bucket_size):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(new_list[i])):</span><br><span class="line">            array[index] = new_list[i][j]</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> array</span><br></pre></td></tr></table></figure><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><blockquote><p>不介绍了</p></blockquote><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>稳定和不稳定的排序算法有哪些？</li><li>哪个算法最稳定，哪个算法最快？</li><li>哪个算法使用空间最大？</li><li>列出各算法的稳定性、时间复杂度、空间复杂度 和 可手写各算法（着重在快速排序、堆排序、归并排序、插入排序）</li><li>python排序的实现：<a href="https://blog.csdn.net/yangzhongblog/article/details/8184707" target="_blank" rel="noopener">time sort</a></li></ol><hr><center>谢谢你的支持~~</center><center class="half">    <img width="300" data-src="https://cdn.jsdelivr.net/gh/JSK520/blog_web@1.1/photos/wechat_shikai.jpg" class="lozad">    <img width="300" data-src="https://cdn.jsdelivr.net/gh/JSK520/blog_web@1.1/photos/alipay_shikai.jpg" class="lozad"></center>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建windows flink idea开发测试环境</title>
      <link href="/posts/b4bb247c/"/>
      <url>/posts/b4bb247c/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建说明"><a href="#搭建说明" class="headerlink" title="搭建说明"></a>搭建说明</h1><h2 id="难易"><a href="#难易" class="headerlink" title="难易"></a>难易</h2><p>windows flink搭建十分简单，官网都有说明，我一路走下来基本没有坑</p><h2 id="记录原因"><a href="#记录原因" class="headerlink" title="记录原因"></a>记录原因</h2><p>简单却记录的原因在于：</p><blockquote><p>1、整合资料，方便快速搭建<br>2、我之前见同事搭建过，觉得牛逼，便想请教下搭建方式，询问是否有教程。结果对方回应说没有教程，靠他一点点摸索，当时听完，对方在我心目中地位瞬间上升很多档次，深刻感知自己的弱小。如今看来，不是我弱小，而是我愚蠢。我百度一番，也没发现全流程教程，所以借此记录，方便后续新手的搭建</p></blockquote><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><p>windows 结合 idea，可以有效快速熟悉flink语法，作为入门是很好的方式</p><h1 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h1><h2 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h2><blockquote><p>1、java1.8以上<br>2、scala 2.1.1 或者 scala 2.1.2 （我下载的是2.1.2）<br>3、maven 最新版本<br>4、idea 社区版<br>上面的环境，可自行百度（我都是去对应官网下载）</p></blockquote><h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>这两个是官网的链接，有先后顺序。如果不想看我的教程，可以直接查看官网教程<br><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.9/zh/dev/projectsetup/java_api_quickstart.html" target="_blank" rel="noopener">参考链接</a><br><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.9/zh/dev/projectsetup/dependencies.html" target="_blank" rel="noopener">参考链接</a></p><h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><blockquote><p>具体步骤只有两步：1、maven创建项目 2、配置依赖</p></blockquote><h4 id="maven创建项目"><a href="#maven创建项目" class="headerlink" title="maven创建项目"></a>maven创建项目</h4><ul><li>打开idea，创建maven工程，按如下配置进行添加。看配置参数可知，我搭建的是1.9版本，对应的版本可以根据自己需求来<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mvn archetype:generate                               \</span><br><span class="line">  -DarchetypeGroupId=org.apache.flink              \</span><br><span class="line">  -DarchetypeArtifactId=flink-quickstart-java      \</span><br><span class="line">  -DarchetypeVersion=1.9.0</span><br></pre></td></tr></table></figure><img alt="操作图" data-src="https://cdn.jsdelivr.net/gh/JSK520/blog_web@1.1/photos/flink_windows.jpg" class="lozad"></li></ul><p>配置完毕后，会进行mvn操作，等待maven操作完成，进行下一步</p><h3 id="配置依赖"><a href="#配置依赖" class="headerlink" title="配置依赖"></a>配置依赖</h3><ul><li>打开pom.xml，我们会发现有两个错误项，把那两个删除，换成下面的依赖，更新maven完成搭建</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-streaming-java_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote><p>在上面的依赖配置中，我们发现scope这个选项，如果要在本地测试，需要把scope的值设置成compile。对应maven scope的解释请看<a href="http://jskblog.xyz/posts/2d6fc607/">maven scope</a>。</p></blockquote><p>简单解释即:<br>scope为compile时，代表强依赖，打包会把依赖添加到jar包中<br>scope为provided时，打包时，依赖不添加到jar包中</p><p>flink对两种scope的使用：</p><ol><li>compile：<strong><em>用于本地测试</em></strong></li><li>provided：<strong><em>用于线上部署运行</em></strong>。依赖不需要打包到jar包中的原因是：flink线上环境有相应的jar包，如果强依赖会出现jar包冲突情况</li></ol><hr><center>创作不易，谢谢你的支持~~</center><center class="half">    <img width="300" data-src="https://cdn.jsdelivr.net/gh/JSK520/blog_web@1.1/photos/wechat_shikai.jpg" class="lozad">    <img width="300" data-src="https://cdn.jsdelivr.net/gh/JSK520/blog_web@1.1/photos/alipay_shikai.jpg" class="lozad"></center>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
          <category> flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows flink </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven中scope的区别</title>
      <link href="/posts/2d6fc607/"/>
      <url>/posts/2d6fc607/</url>
      
        <content type="html"><![CDATA[<h1 id="依赖的Scope"><a href="#依赖的Scope" class="headerlink" title="依赖的Scope"></a>依赖的Scope</h1><p>最近在本地搭建flink想要熟悉语法，根据官网搭建过程中，发现maven的个别概念不熟悉，就此做个记录。<br>scope定义了类包在项目的使用阶段。项目阶段包括： 编译，运行，测试和发布。</p><h1 id="分类说明"><a href="#分类说明" class="headerlink" title="分类说明"></a>分类说明</h1><ul><li>compile<br>默认scope为compile，表示为当前依赖参与项目的编译、测试和运行阶段，属于强依赖。打包之时，会达到包里去。</li><li>test<br>该依赖仅仅参与测试相关的内容，包括测试用例的编译和执行，比如定性的Junit。</li><li>runtime<br>依赖仅参与运行周期中的使用。一般这种类库都是接口与实现相分离的类库，比如JDBC类库，在编译之时仅依赖相关的接口，在具体的运行之时，才需要具体的mysql、oracle等等数据的驱动程序。<br>此类的驱动都是为runtime的类库。</li><li>provided<br>该依赖在打包过程中，不需要打进去，这个由运行的环境来提供，比如tomcat或者基础类库等等，事实上，该依赖可以参与编译、测试和运行等周期，与compile等同。区别在于打包阶段进行了exclude操作。</li><li>system<br>使用上与provided相同，不同之处在于该依赖不从maven仓库中提取，而是从本地文件系统中提取，其会参照systemPath的属性进行提取依赖。</li><li>import<br>这个是maven2.0.9版本后出的属性，import只能在dependencyManagement的中使用，能解决maven单继承问题，import依赖关系实际上并不参与限制依赖关系的传递性。</li><li>systemPath<br>当maven依赖本地而非repository中的jar包，sytemPath指明本地jar包路径,例如：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupid</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>hamcrest-core<span class="tag">&lt;/<span class="name">artifactid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systempath</span>&gt;</span>$&#123;basedir&#125;/WebContent/WEB-INF/lib/hamcrest-core-1.3.jar<span class="tag">&lt;/<span class="name">systempath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="dependency中的type"><a href="#dependency中的type" class="headerlink" title="dependency中的type"></a>dependency中的type</h1><p>引入某一个依赖时，必须指定type，这是因为用于匹配dependency引用和dependencyManagement部分的最小信息集实际上是{groupId，artifactId，type，classifier}。在很多情况下，这些依赖关系将引用没有classifier的jar依赖。这允许我们将标识设置为{groupId，artifactId}，因为type的默认值是jar，并且默认classifier为null。<br>type的值一般有jar、war、pom等，声明引入的依赖的类型</p><hr><center>谢谢你的支持~~</center><center class="half">    <img width="300" data-src="https://cdn.jsdelivr.net/gh/JSK520/blog_web@1.1/photos/wechat_shikai.jpg" class="lozad">    <img width="300" data-src="https://cdn.jsdelivr.net/gh/JSK520/blog_web@1.1/photos/alipay_shikai.jpg" class="lozad"></center>]]></content>
      
      
      <categories>
          
          <category> 技术技巧 </category>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven scope </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装jar包后如何用maven调用</title>
      <link href="/posts/abf5534d/"/>
      <url>/posts/abf5534d/</url>
      
        <content type="html"><![CDATA[<h1 id="安装jar包后如何用maven调用"><a href="#安装jar包后如何用maven调用" class="headerlink" title="安装jar包后如何用maven调用"></a>安装jar包后如何用maven调用</h1><p>最近有使用maven，故此做一个maven的简单记录，防止后续需要</p><p>安装自定义jar包到本地Maven库<br>当出现下列情况时：<br>1.要使用的 jar 不存在于 Maven 的中心储存库中。<br>2.您创建了一个自定义的 jar ，而另一个 Maven 项目需要使用。</p><p>远程服务器需要在settings.xml中配置server用户名密码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>n<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>12345<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要手动将所需要的jar包存放至Maven本地资源库，可以再cmd中输入以下命令：</p><blockquote><p>mvn install:install-file -Dfile=c:\userdefined-1.0.jar -DgroupId=pers.test.code -DartifactId=userdefined -Dversion={1.0} -Dpackaging=jar</p></blockquote><p>远程库命令如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">mvn</span> <span class="attr">deploy:deploy-file</span> <span class="bullet">-DgroupId=com.abc.com3rd.policy</span> <span class="bullet">-DartifactId=policy-sdk</span> <span class="bullet">-Dversion=20180502102622</span> <span class="bullet">-Dpackaging=jar</span> <span class="bullet">-Dfile=D:\jar\local_policy.jar</span> <span class="bullet">-DrepositoryId=repo-huotu</span> <span class="bullet">-Durl=http://repo.abc.com:8081/nexus/content/repositories/releases/</span> <span class="bullet">-DgeneratePom=false</span></span><br><span class="line"><span class="string">各参数代表含义为：</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span><span class="string">Dmaven.test.skip=true</span>                              <span class="string">//跳过编译、测试</span></span><br><span class="line"><span class="bullet">-</span><span class="string">Dfile=D:\MvnProject\service-mvn-1.0.0.jar</span>          <span class="string">//jar包文件地址,绝对路径</span></span><br><span class="line"><span class="bullet">-</span><span class="string">DgroupId=pri.roy.mvn.test</span>                          <span class="string">//gruopId--pom坐标，自定义</span></span><br><span class="line"><span class="bullet">-</span><span class="string">DartifactId=mvn-api</span>                                <span class="string">//artifactId--pom坐标，自定义</span></span><br><span class="line"><span class="bullet">-</span><span class="string">Dversion</span>                                           <span class="string">//版本号</span></span><br><span class="line"><span class="bullet">-</span><span class="string">Dpackaging</span>                                         <span class="string">//打包方式</span></span><br><span class="line"><span class="bullet">-</span><span class="string">DrepositoryId</span>                                      <span class="string">//远程库服务器ID</span></span><br><span class="line"><span class="bullet">-</span><span class="string">Durl</span>                                               <span class="string">//远程库服务器地址</span></span><br></pre></td></tr></table></figure><p>安装成功后，在pom.xml文件中可以使用了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>pers.test.code<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>userdefined <span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><center>谢谢你的支持~~</center><center class="half">    <img width="300" data-src="https://cdn.jsdelivr.net/gh/JSK520/blog_web@1.1/photos/wechat_shikai.jpg" class="lozad">    <img width="300" data-src="https://cdn.jsdelivr.net/gh/JSK520/blog_web@1.1/photos/alipay_shikai.jpg" class="lozad"></center>]]></content>
      
      
      <categories>
          
          <category> 技术技巧 </category>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
            <tag> jar包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java对象内存计算</title>
      <link href="/posts/a1f3afe4/"/>
      <url>/posts/a1f3afe4/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/yunqiinsight/article/details/80431831" target="_blank" rel="noopener">这个参考比较详细</a><br><a href="https://blog.csdn.net/weixin_33859665/article/details/91429393" target="_blank" rel="noopener">参考</a></p><hr><center>谢谢你的支持~~</center><center class="half">    <img width="300" data-src="https://cdn.jsdelivr.net/gh/JSK520/blog_web@1.1/photos/wechat_shikai.jpg" class="lozad">    <img width="300" data-src="https://cdn.jsdelivr.net/gh/JSK520/blog_web@1.1/photos/alipay_shikai.jpg" class="lozad"></center>]]></content>
      
      
      <categories>
          
          <category> hide </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsdelivr加速读取github文件</title>
      <link href="/posts/5a5aec9f/"/>
      <url>/posts/5a5aec9f/</url>
      
        <content type="html"><![CDATA[<h2 id="jsdelivr是什么"><a href="#jsdelivr是什么" class="headerlink" title="jsdelivr是什么"></a>jsdelivr是什么</h2><p>github：<a href="https://github.com/jsdelivr/jsdelivr" target="_blank" rel="noopener">https://github.com/jsdelivr/jsdelivr</a><br>官网：<a href="https://www.jsdelivr.com/" target="_blank" rel="noopener">https://www.jsdelivr.com/</a><br>免费的公用CDN加速服务网（CDN是就近服务器访问，所以会加速）</p><h2 id="作用是什么"><a href="#作用是什么" class="headerlink" title="作用是什么"></a>作用是什么</h2><p>可以加速访问文件、图片，而本文章则介绍如何利用jsdelivr加速访问github照片为主<br>之所以需要用到jsdelivr加速访问照片，在于可<strong>方便快速</strong>管理 hexo 里面的图片链接</p><h2 id="如何操作"><a href="#如何操作" class="headerlink" title="如何操作"></a>如何操作</h2><p>举我个人例子的大致过程：</p><ol><li>生成新的github仓库</li><li>构建文件夹用于存放照片文件 <a href="https://github.com/JSK520/blog_web/blob/master/photos/person.jpg" target="_blank" rel="noopener">github目录</a></li><li>关键一步：点击项目上端的<strong>release</strong> 创建版本：<br><img alt="release的创建简介" data-src="https://cdn.jsdelivr.net/gh/JSK520/blog_web@v1.1/photos/release_v1.jpg" class="lozad"></li><li>创建好后，点击进入图片链接：<br>那我的做例子，进入github照片路径为：<br><a href="https://github.com/JSK520/blog_web/blob/v1.1/photos/release_v1.jpg" target="_blank" rel="noopener">https://github.com/JSK520/blog_web/blob/v1.1/photos/release_v1.jpg</a></li><li>把对应路径变更为以下方式即可<br><a href="https://cdn.jsdelivr.net/gh/JSK520/blog_web@v1.1/photos/release_v1.jpg" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/JSK520/blog_web@v1.1/photos/release_v1.jpg</a></li></ol><p>仔细看我们发现：<br><a href="https://github.com/JSK520/blog_web/blob/v1.1/" target="_blank" rel="noopener">https://github.com/JSK520/blog_web/blob/v1.1/</a><br>这个前缀替换成了<br><a href="https://cdn.jsdelivr.net/gh/JSK520/blog_web@v1.1/" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/JSK520/blog_web@v1.1/</a><br>而 /photos/release_v1.jpg 是github的文件名</p><hr><center>谢谢你的支持~~</center><center class="half">    <img width="300" data-src="https://cdn.jsdelivr.net/gh/JSK520/blog_web@1.1/photos/wechat_shikai.jpg" class="lozad">    <img width="300" data-src="https://cdn.jsdelivr.net/gh/JSK520/blog_web@1.1/photos/alipay_shikai.jpg" class="lozad"></center>]]></content>
      
      
      <categories>
          
          <category> jsdelivr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsdelivr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown 样式总结</title>
      <link href="/posts/c491c9ac/"/>
      <url>/posts/c491c9ac/</url>
      
        <content type="html"><![CDATA[<blockquote><p>markdown的样式总结</p></blockquote><hr><p><strong>本文由佳境协助完成，就此感谢他，做个小广告：</strong></p><blockquote><ul><li>Welcome To <a href="http://shmily-qjj.top/" target="_blank" rel="noopener">佳境博客</a></li><li>他的<a href="https://github.com/Shmilyqjj" target="_blank" rel="noopener">GitHub</a>地址</li><li>他的<a href="http://music.163.com/artist?id=13610347" target="_blank" rel="noopener">CloudMusic</a>地址</li></ul></blockquote><h3 id="HEXO目录结构"><a href="#HEXO目录结构" class="headerlink" title="HEXO目录结构"></a>HEXO目录结构</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">|--</span> <span class="string">_config.yml</span>     <span class="string">全局配置（网站名称作者主题部署等）</span></span><br><span class="line"><span class="string">|--</span> <span class="string">package.json</span>    <span class="string">框架参数（框架依赖拆件及其版本）</span></span><br><span class="line"><span class="string">|--</span> <span class="string">scaffolds</span>       <span class="string">脚手架（通用MarkDown模板，新建文章时，hexo根据这个目录的文件进行构建）</span></span><br><span class="line"><span class="string">|--</span> <span class="string">source</span>          <span class="string">网页资源（css,js,images,文章等）</span></span><br><span class="line">   <span class="string">|--</span> <span class="string">_posts</span>       <span class="string">博客文章（写文章的地方）</span></span><br><span class="line"><span class="string">|--</span> <span class="string">themes</span>          <span class="string">主题目录</span></span><br><span class="line"><span class="string">|--</span> <span class="string">.gitignore</span>      <span class="string">Git忽略文件或目录</span></span><br><span class="line"><span class="string">|--</span> <span class="string">package.json</span>    <span class="string">框架参数（框架依赖拆件及其版本）</span></span><br></pre></td></tr></table></figure><hr><h1 id="MarkDown语法字典"><a href="#MarkDown语法字典" class="headerlink" title="MarkDown语法字典"></a>MarkDown语法字典</h1><ul><li><p>标题</p><h1 id="一级标题-最大"><a href="#一级标题-最大" class="headerlink" title="一级标题(最大)"></a>一级标题(最大)</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></li><li><p>字体</p></li><li><p>斜体文本*<br><em>斜体文本</em></p></li><li><p><em>粗体文本*</em><br><strong>粗体文本</strong></p></li><li><p><strong>粗斜体文本*</strong><br><strong><em>粗斜体文本</em></strong><br><u>带下划线文本</u></p></li><li><p>脚注</p></li></ul><ul><li><p>列表<br>无序列表用* + -三种符号表示</p><ul><li>列表嵌套</li></ul><ol><li>有序列表第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素<blockquote><p>列表中可以使用区块<br>列表中可以使用区块</p></blockquote></li></ul></li><li>有序列表第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素<ul><li>最多第三层嵌套</li></ul><ul><li>最多第三层嵌套</li></ul><ul><li>最多第三层嵌套</li></ul></li></ul></li></ol></li><li><p>区块引用</p><blockquote><p>最外层</p><blockquote><p>第一层嵌套…</p><blockquote><p>第二层嵌套…</p></blockquote></blockquote><ul><li>list</li><li>list</li></ul><ul><li>list</li></ul></blockquote></li><li><p>代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">        System.out.<span class="title">println</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="comment">//tab或者四个空格</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = []</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">copy.copy(l)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> qjj = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//定义代码块并指定语言-&gt;显示高亮</span></span><br></pre></td></tr></table></figure><ul><li>链接<br>这是我的云音乐主页<a href="http://music.163.com/artist?id=13610347" target="_blank" rel="noopener">CloudMusic</a><br>直接显示链接地址: <a href="http://music.163.com/artist?id=13610347" target="_blank" rel="noopener">http://music.163.com/artist?id=13610347</a><br>我的网易云主页高级链接<a href="http://music.163.com/artist?id=13610347" target="_blank" rel="noopener">cm-1</a><br>我的网易云主页高级链接<a href="http://music.163.com/artist?id=13610347" target="_blank" rel="noopener">cm-2</a></li></ul><ul><li><p>添加图片<br><img alt="alt lalala" data-src="http://m.qpic.cn/psb?/V10aWFGB3ChSVt/4Onwe7wF*pBhD4*iWs0KetAXGTu6fMrAUJrxWkkB4fk!/b/dL8AAAAAAAAA&bo=hANYAgAAAAADB*8!&rf=viewer_4" class="lozad"><br><img alt="alt hahaha" title="图片注释呀!鼠标放那会弹出注释!" data-src="http://m.qpic.cn/psb?/V10aWFGB3ChSVt/4Onwe7wF*pBhD4*iWs0KetAXGTu6fMrAUJrxWkkB4fk!/b/dL8AAAAAAAAA&bo=hANYAgAAAAADB*8!&rf=viewer_4" class="lozad"></p><img width="30%" title="可以使用html的标签,控制图片大小,title悬停显示文字" data-src="http://m.qpic.cn/psb?/V10aWFGB3ChSVt/4Onwe7wF*pBhD4*iWs0KetAXGTu6fMrAUJrxWkkB4fk!/b/dL8AAAAAAAAA&bo=hANYAgAAAAADB*8!&rf=viewer_4" class="lozad"></li><li><p>图片链接<br><a href="https://www.alluxio.io/slack" target="_blank" rel="noopener"><img alt="Slack" data-src="https://slackin.alluxio.io/badge.svg" class="lozad"></a><br><a href="https://www.alluxio.io/download" target="_blank" rel="noopener"><img alt="Release" data-src="https://img.shields.io/github/release/alluxio/alluxio/all.svg" class="lozad"></a><br><a href="https://hub.docker.com/r/alluxio/alluxio" target="_blank" rel="noopener"><img alt="Docker Pulls" data-src="https://img.shields.io/docker/pulls/alluxio/alluxio.svg" class="lozad"></a><br><a href="https://www.alluxio.io/docs" target="_blank" rel="noopener"><img alt="Documentation" data-src="https://img.shields.io/badge/docs-reference-blue.svg" class="lozad"></a><br><a href="https://twitter.com/intent/follow?screen_name=alluxio" target="_blank" rel="noopener"><img alt="Twitter Follow" data-src="https://img.shields.io/twitter/follow/alluxio.svg?label=Follow&style=social" class="lozad"></a><br><a href="https://github.com/Alluxio/alluxio/blob/master/LICENSE" target="_blank" rel="noopener"><img alt="License" data-src="https://img.shields.io/github/license/alluxio/alluxio.svg" class="lozad"></a></p></li></ul><ul><li>添加表格<br><code>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行</code><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>表格</td><td>表格</td></tr><tr><td>表格</td><td>表格</td></tr><tr><td>表格</td><td>表格</td></tr></tbody></table></li></ul><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><ul><li>对HTML的支持<br><code>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Ctrl<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>+<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Alt<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>+<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Del<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span> 重启电脑</span><br></pre></td></tr></table></figure><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><p><strong>文本加粗</strong><br><strong>*正常显示*号配合文本加粗体\</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">以下支持反斜杠转义</span></span><br><span class="line"><span class="string">\</span>   <span class="string">反斜线</span></span><br><span class="line"><span class="string">`</span>   <span class="string">反引号</span></span><br><span class="line"><span class="string">*</span>   <span class="string">星号</span></span><br><span class="line"><span class="string">_</span>   <span class="string">下划线</span></span><br><span class="line"><span class="string">&#123;&#125;</span>  <span class="string">花括号</span></span><br><span class="line"><span class="string">[]</span>  <span class="string">方括号</span></span><br><span class="line"><span class="string">()</span>  <span class="string">小括号</span></span><br><span class="line"><span class="comment">#   井字号</span></span><br><span class="line"><span class="string">+</span>   <span class="string">加号</span></span><br><span class="line"><span class="bullet">-</span>   <span class="string">减号</span></span><br><span class="line"><span class="string">.</span>   <span class="string">英文句点</span></span><br><span class="line"><span class="string">!</span>   <span class="string">感叹号</span></span><br></pre></td></tr></table></figure><ul><li>数学公式  需要开启 mathjax: 0 0改为1<br><code>当需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现</code></li></ul><p>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>$$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}<br>$$</p><hr><h3 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks:"></a>Thanks:</h3><p><a href="https://github.com/mashirozx/Sakura/" target="_blank" rel="noopener">Sakura</a> Hexo theme.</p><p><a href="https://sakura.hojun.cn" target="_blank" rel="noopener">hojun</a> Modified into the theme.</p><hr><center>谢谢你的支持~~</center><center class="half">    <img width="300" data-src="https://cdn.jsdelivr.net/gh/JSK520/blog_web@1.1/photos/wechat_shikai.jpg" class="lozad">    <img width="300" data-src="https://cdn.jsdelivr.net/gh/JSK520/blog_web@1.1/photos/alipay_shikai.jpg" class="lozad"></center>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156/"/>
      <url>/posts/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><a id="more"></a><hr><center>谢谢你的支持~~</center><center class="half">    <img width="300" data-src="https://cdn.jsdelivr.net/gh/JSK520/blog_web@1.1/photos/wechat_shikai.jpg" class="lozad">    <img width="300" data-src="https://cdn.jsdelivr.net/gh/JSK520/blog_web@1.1/photos/alipay_shikai.jpg" class="lozad"></center>]]></content>
      
      
      <categories>
          
          <category> Hello World </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 总结</title>
      <link href="/posts/424111dd/"/>
      <url>/posts/424111dd/</url>
      
        <content type="html"><![CDATA[<p>无法提交theme：<br>下面以yelee做例子<br>cd theme/<br>删除 .git文件<br>git rm -cached yelee/<br>git add yelee</p><p>如果出现 lock情况：<br>rm -f xx/.git/index.lock</p><h2 id="github照片上传："><a href="#github照片上传：" class="headerlink" title="github照片上传："></a>github照片上传：</h2><p>查看远程仓库的版本：<br>git ls-remote</p><p>直接覆盖线上版本：<br>git push -f origin master:tags/v1.1</p><hr><center>谢谢你的支持~~</center><center class="half">    <img width="300" data-src="https://cdn.jsdelivr.net/gh/JSK520/blog_web@1.1/photos/wechat_shikai.jpg" class="lozad">    <img width="300" data-src="https://cdn.jsdelivr.net/gh/JSK520/blog_web@1.1/photos/alipay_shikai.jpg" class="lozad"></center>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
